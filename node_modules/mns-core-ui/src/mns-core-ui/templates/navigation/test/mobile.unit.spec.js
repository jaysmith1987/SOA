import Mobile from '../js/mobile';

describe('templates : navigation', () => {

    let windowMock = null;
    let mobileNav = null;

    before(() => {
        windowMock = mock.getMockWindow();

        windowMock.innerWidth = 1024;
        windowMock.document.documentElement.clientHeight = 568;
        windowMock.document.documentElement.clientWidth = 320;

        mobileNav = new Mobile(null, windowMock);

    });

    describe('ui : mobile', () => {

        it('should show element as visible', () => {

            let elMock = {
                getBoundingClientRect: () => {
                    return {
                        top: 10,
                        left: 0,
                        bottom: 40,
                        right: 0
                    };
                }
            };

            let result = mobileNav.isElementVisible(elMock);

            expect(result).to.equal(true);
        });


        it('should not show element as visible', () => {

            let elMock = {
                getBoundingClientRect: () => {
                    return {
                        top: -10,
                        left: 0,
                        bottom: 20,
                        right: 0
                    };
                }
            };

            let result = mobileNav.isElementVisible(elMock);

            expect(result).to.equal(false);
        });

        it('should scroll current level 3 into view', () => {

            let labelMock = {
                scrollIntoView: sinon.spy()
            };

            let querySelectorStub = sinon.stub(windowMock.document, 'querySelector').returns(labelMock);
            let isElementVisibleStub = sinon.stub(mobileNav, 'isElementVisible').returns(false);

            mobileNav.scrollCurrentLevel3IntoView('testId');

            expect(labelMock.scrollIntoView.calledOnce).to.equal(true);

            querySelectorStub.restore();
            isElementVisibleStub.restore();
        });

        it('should not scroll level 3 into view', () => {

            let labelMock = {
                scrollIntoView: sinon.spy()
            };

            let querySelectorStub = sinon.stub(windowMock.document, 'querySelector').returns(labelMock);
            let isElementVisibleStub = sinon.stub(mobileNav, 'isElementVisible').returns(true);

            mobileNav.scrollCurrentLevel3IntoView('testId');

            expect(labelMock.scrollIntoView.calledOnce).to.equal(false);

            querySelectorStub.restore();
            isElementVisibleStub.restore();
        });

        it('should de select level 3 checkboxes', () => {

            let checkboxes = [
                {checked: true},
                {checked: true}
            ];

            windowMock.document.querySelectorAll = sinon.stub();
            windowMock.document.querySelectorAll.returns(checkboxes);

            let id = 'testId';

            mobileNav.deSelectLevel3Checkboxes(id);

            expect(windowMock.document.querySelectorAll.calledWith('.menu__mobile-level3:checked:not(#' + id + ')')).to.equal(true);
            expect(checkboxes[0].checked).to.equal(false);
            expect(checkboxes[1].checked).to.equal(false);

        });
    });
});
