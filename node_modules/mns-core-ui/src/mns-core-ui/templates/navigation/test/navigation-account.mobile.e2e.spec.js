import NavigationMobilePage from './pageObject/navigation.mobile.page';

describe('Global Navigation', () => {

    // TODO: allow for the path to be overridden  when executed
    let navigationMobilePage = new NavigationMobilePage();

    before(() => {
        navigationMobilePage.open();
    });

    describe('Mobile', () => {
        describe('Account', () => {

            it('when user is NOT logged in should show register and sparks', () => {
                navigationMobilePage.logUserOut();
                navigationMobilePage.openHamburgerMenu();

                expect(navigationMobilePage.register.isVisible()).to.be.equal(true);
                expect(navigationMobilePage.sparks.isVisible()).to.be.equal(true);
            });

            it('when user is NOT logged in should hide account and sign out', () => {
                navigationMobilePage.logUserOut();
                navigationMobilePage.openHamburgerMenu();

                expect(navigationMobilePage.myAccount.isVisible()).to.be.equal(false);
                expect(navigationMobilePage.signOut.isVisible()).to.be.equal(false);
            });

            it('when user IS logged in should show my account, sign out and sparks', () => {
                navigationMobilePage.logUserIn();
                navigationMobilePage.openHamburgerMenu();

                expect(navigationMobilePage.myAccount.isVisible()).to.be.equal(true);
                expect(navigationMobilePage.signOut.isVisible()).to.be.equal(true);
                expect(navigationMobilePage.sparks.isVisible()).to.be.equal(true);
            });

            it('when user IS logged in should hide register', () => {
                navigationMobilePage.logUserIn();
                navigationMobilePage.openHamburgerMenu();

                expect(navigationMobilePage.register.isVisible()).to.be.equal(false);
            });

        });
    });
});
