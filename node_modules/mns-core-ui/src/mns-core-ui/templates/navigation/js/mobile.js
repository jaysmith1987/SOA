import UI from '../../../base/js/ui';
import user from '../../account/js/user';
import LazyLoad from '../../../base/js/lazyload';

const SCROLL_INTO_VIEW_DELAY = 160; // this needs to correspond the the CSS animation timing
const NAME = 'mobile';

export default class Mobile {

    /**
     * Mobile navigation
     * @param events
     * @param windowReference
     */
    constructor(events, windowReference = window) {

        var elements = {
            link: '.nav li > a'
        };
        this.lazyLoad = new LazyLoad(300);

        this.lazyLoad.load = this.lazyLoad.load.bind(this.lazyLoad);
        this.loadImagesDelayed = this.loadImagesDelayed.bind(this);
        this.level3Change = this.level3Change.bind(this);
        this.menuChange = this.menuChange.bind(this);


        this.UI = new UI(NAME, elements);
        events && this.UI.analytics(events[NAME]);

        this.window = windowReference;
        this.lastTimeout = null;
    }

    /**
     * bind
     * @returns {void}
     */
    bind() {

        this.navContentEl = this.window.document.getElementsByClassName('nav__content');

        for (let iCount = 0; iCount < this.navContentEl.length; iCount++) {
            this.navContentEl[iCount].addEventListener('touchmove', this.lazyLoad.load);
            this.navContentEl[iCount].addEventListener('touchend', this.lazyLoad.load);
            this.navContentEl[iCount].addEventListener('scroll', this.lazyLoad.load);
        }

        this.level2LabelEl = this.window.document.getElementsByClassName('menu__mobile-level2__label');

        for (let iCount = 0; iCount < this.level2LabelEl.length; iCount++) {
            this.level2LabelEl[iCount].addEventListener('touchstart', this.loadImagesDelayed);
            this.level2LabelEl[iCount].addEventListener('mousedown', this.loadImagesDelayed);
        }

        this.checkboxes = this.window.document.getElementsByClassName('menu__mobile-level3');

        for (let iCheckbox = 0; iCheckbox < this.checkboxes.length; iCheckbox++) {
            this.checkboxes[iCheckbox].addEventListener('change', this.level3Change);
        }

        this.radioButtons = this.window.document.getElementsByName('menu');

        for (let iRadio = 0; iRadio < this.radioButtons.length; iRadio++) {
            this.radioButtons[iRadio].addEventListener('change', this.menuChange);
        }

        this.lazyLoad.bind();

        user.processLoggedInElements();
    }

    unbind() {

        for (let iCount = 0; iCount < this.navContentEl.length; iCount++) {
            this.navContentEl[iCount].removeEventListener('touchmove', this.lazyLoad.load);
            this.navContentEl[iCount].removeEventListener('touchend', this.lazyLoad.load);
            this.navContentEl[iCount].removeEventListener('scroll', this.lazyLoad.load);
        }

        for (let iCount = 0; iCount < this.level2LabelEl.length; iCount++) {
            this.level2LabelEl[iCount].removeEventListener('touchstart', this.loadImagesDelayed);
            this.level2LabelEl[iCount].removeEventListener('mousedown', this.loadImagesDelayed);
        }

        for (let iCheckbox = 0; iCheckbox < this.checkboxes.length; iCheckbox++) {
            this.checkboxes[iCheckbox].removeEventListener('change', this.level3Change);
        }

        for (let iRadio = 0; iRadio < this.radioButtons.length; iRadio++) {
            this.radioButtons[iRadio].removeEventListener('change', this.menuChange);
        }

        this.lazyLoad.unbind();

    }

    loadImagesDelayed() {
        clearTimeout(this.lastTimeout);

        this.lastTimeout = setTimeout(()=> {
            this.lazyLoad.load();
        }, 300);
    }

    /**
     * isElementVisible
     * @param el {Object}
     * @returns {Boolean}
     */
    isElementVisible(el) {

        let rect = el.getBoundingClientRect();

        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (this.window.innerHeight || this.window.document.documentElement.clientHeight) &&
            rect.right <= (this.window.innerWidth || this.window.document.documentElement.clientWidth)
        );
    }

    /**
     * scrollCurrentLevel3IntoView
     * @param level3Id {String}
     * @returns {void}
     */
    scrollCurrentLevel3IntoView(level3Id) {
        this.window.clearTimeout(this.lastTimeout);

        this.lastTimeout = this.window.setTimeout(() => {
            let label = this.window.document.querySelector('[for=' + level3Id + ']');

            if (!this.isElementVisible(label)) {
                label.scrollIntoView();
            }
        }, SCROLL_INTO_VIEW_DELAY);
    }

    /**
     * deSelectLevel3Checkboxes
     * @param selectedCheckboxId {String}
     * @returns {void}
     */
    deSelectLevel3Checkboxes(selectedCheckboxId) {
        let checkboxes = this.window.document.querySelectorAll('.menu__mobile-level3:checked:not(#' + selectedCheckboxId + ')');

        for (let i = 0; i < checkboxes.length; i++) {
            checkboxes[i].checked = false;
        }
    }

    /**
     * level3Change
     * @param e {Object}
     * @returns {void}
     */
    level3Change(e) {
        this.deSelectLevel3Checkboxes(e.target.id);
        this.scrollCurrentLevel3IntoView(e.target.id);
    }

    /**
     * menuChange
     * @param e {Object}
     * @returns {void}
     */
    menuChange(e) {
        this.deSelectLevel3Checkboxes(e.target.id);
    }
}
