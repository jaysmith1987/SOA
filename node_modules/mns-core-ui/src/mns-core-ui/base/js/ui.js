import eventBinder from './events';

export default class UI {

    /**
     * @description create a UI element
     * @param type {String} type of UI element e.g default/mobile
     * @param obj {Object} elements : selectors that are exposed explicitly to be able to attach events to
     */
    constructor(type, obj) {

        this.type = type;

        this.eventBinder = eventBinder;

        this.elements = obj.elements || {};

        this.events = {};
    }

    /**
     * @description analytics events for UI
     * @param events {Object} object listing data objects to be passed with events from element
     * @param documentReference {Object}
     * @returns {void}
     */
    analytics(events, documentReference = document) {

        this.document = documentReference;

        this.events.analytics = events;

        this.attachEvents();
    }

    /**
     * @returns {void}
     */
    attachEvents() {
        Object.keys(this.elements).forEach((el) => {
            if (this.events.analytics
                && this.events.analytics[el]) {
                this.eventBinder.bind(
                    this.document.querySelectorAll(this.elements[el]),
                    this.events.analytics[el]
                );
            }
        });
    }

    /**
     * @property type {String}
     */
    set type(type) {
        this._type = type;
    }

    get type() {
        return this._type;
    }

    /**
     * @property elements {Object}
     */
    set elements(elements) {
        this._elements = elements;
    }

    get elements() {
        return this._elements;
    }

    /**
     * @property events {Object}
     */
    set events(events) {
        this._events = events;
    }

    get events() {
        return this._events;
    }
}
